// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<DropdownField /> should render a <DropdownField> that does not render a placeholder 1`] = `
.c8 {
  display: inline-block;
}

.c8 > svg {
  float: left;
}

.c7 {
  padding: 0 1rem;
}

.c7 i {
  display: block;
}

.c7 + .c6 {
  padding-left: 0;
}

.c3 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c9 {
  position: relative;
  outline: none;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(75,78,82,1);
  cursor: auto;
  overflow-y: auto;
  border: 1px solid rgba(255,255,255,0);
}

.c2:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c4 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(62,62,62,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: auto;
}

.c5 {
  padding: 0.25rem 0.5rem;
  background-color: rgba(211,211,211,1);
  color: rgba(0,0,0,1);
  display: inline-block;
  font-size: 0.8em;
  line-height: 0.8em;
  border: 0;
  margin: 0 0.5rem 0 0;
}

<DropdownFieldInt
  data={
    Array [
      "1",
      "2",
    ]
  }
  multiple={true}
  placeholder="No value selected"
  value={
    Array [
      "1",
      "2",
    ]
  }
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-jlyJG",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
  outline: 0;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-jlyJG",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <styled.div
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gipzik",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  display: flex;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gipzik",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onKeyDown={[Function]}
            onMouseDown={[Function]}
            tabIndex={0}
          >
            <div
              className="c1"
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              tabIndex={0}
            >
              <Styled(styled.div)
                border={1}
                focused={false}
                hasValue={true}
              >
                <StyledComponent
                  border={1}
                  focused={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-csuQGl",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          [Function],
                          "
  border: 1px solid ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "Styled(styled.div)",
                      "foldedComponentIds": Array [
                        "sc-jzJRlG",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-csuQGl",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hasValue={true}
                >
                  <div
                    className="c2"
                  >
                    <Component
                      error={false}
                      focused={false}
                      hasValue={true}
                      placeholder="No value selected"
                    >
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gqjmRU",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  flex-grow: 1;
  display: flex;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-gqjmRU",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c3"
                          >
                            <styled.div
                              labelShown={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-Rmtcm",
                                      "isStatic": false,
                                      "lastClassName": "c4",
                                      "rules": Array [
                                        "
  ",
                                        "
    ",
                                        "font-size: 1rem;
  ",
                                        "
    ",
                                        "line-height: 1.375rem;
  ",
                                        "
    ",
                                        "
  ",
                                        "
  padding: ",
                                        [Function],
                                        ";
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: ",
                                        [Function],
                                        ";
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-Rmtcm",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                labelShown={false}
                              >
                                <div
                                  className="c4"
                                >
                                  <Styled(styled.span)
                                    key="1"
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-fMiknA",
                                            "isStatic": false,
                                            "lastClassName": "c5",
                                            "rules": Array [
                                              "
  padding: ",
                                              "0.25rem",
                                              " ",
                                              "0.5rem",
                                              ";
  background-color: ",
                                              [Function],
                                              ";
  color: ",
                                              [Function],
                                              ";
  display: inline-block;
  font-size: 0.8em;
  line-height: 0.8em;
  border: 0;
",
                                              "
  margin: 0 ",
                                              "0.5rem",
                                              " 0 0;
",
                                            ],
                                          },
                                          "displayName": "Styled(styled.span)",
                                          "foldedComponentIds": Array [
                                            "sc-cSHVUG",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "sc-fMiknA",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <span
                                        className="c5"
                                      >
                                        1
                                      </span>
                                    </StyledComponent>
                                  </Styled(styled.span)>
                                  <Styled(styled.span)
                                    key="2"
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-fMiknA",
                                            "isStatic": false,
                                            "lastClassName": "c5",
                                            "rules": Array [
                                              "
  padding: ",
                                              "0.25rem",
                                              " ",
                                              "0.5rem",
                                              ";
  background-color: ",
                                              [Function],
                                              ";
  color: ",
                                              [Function],
                                              ";
  display: inline-block;
  font-size: 0.8em;
  line-height: 0.8em;
  border: 0;
",
                                              "
  margin: 0 ",
                                              "0.5rem",
                                              " 0 0;
",
                                            ],
                                          },
                                          "displayName": "Styled(styled.span)",
                                          "foldedComponentIds": Array [
                                            "sc-cSHVUG",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "sc-fMiknA",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <span
                                        className="c5"
                                      >
                                        2
                                      </span>
                                    </StyledComponent>
                                  </Styled(styled.span)>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Component>
                    <Component
                      hasValue={true}
                    />
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "c6",
                              "isStatic": true,
                              "lastClassName": "c7",
                              "rules": Array [
                                "
  padding: 0 ",
                                "1rem",
                                ";

  i {
    display: block;
  }

  & + & {
    padding-left: 0;
  }
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "c6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="c6 c7"
                        >
                          <Icon
                            color="rgba(75,78,82,1)"
                            name="KeyboardArrowDown"
                            size="22px"
                          >
                            <styled.i>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-htpNat",
                                      "isStatic": true,
                                      "lastClassName": "c8",
                                      "rules": Array [
                                        "
  display: inline-block;

  > svg {
    float: left;
  }
",
                                      ],
                                    },
                                    "displayName": "styled.i",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-htpNat",
                                    "target": "i",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <i
                                  className="c8"
                                >
                                  <KeyboardArrowDown
                                    height="22px"
                                    style={
                                      Object {
                                        "fill": "rgba(75,78,82,1)",
                                        "stroke": undefined,
                                      }
                                    }
                                    viewBox="0 0 24 24"
                                    width="22px"
                                  >
                                    <svg
                                      height="22px"
                                      style={
                                        Object {
                                          "fill": "rgba(75,78,82,1)",
                                          "stroke": undefined,
                                        }
                                      }
                                      viewBox="0 0 24 24"
                                      width="22px"
                                    >
                                      <path
                                        d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
                                      />
                                    </svg>
                                  </KeyboardArrowDown>
                                </i>
                              </StyledComponent>
                            </styled.i>
                          </Icon>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </div>
                </StyledComponent>
              </Styled(styled.div)>
            </div>
          </StyledComponent>
        </styled.div>
        <Responsive
          render={[Function]}
        >
          <InteractiveList
            autoFocus={true}
            autoPosition={true}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            excludeScrollbar={false}
            indices={
              Array [
                0,
                1,
              ]
            }
            multiple={true}
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={false}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <InteractiveListInt
              autoFocus={true}
              autoPosition={true}
              customWrapper={[Function]}
              data={
                Array [
                  "1",
                  "2",
                ]
              }
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              indices={
                Array [
                  0,
                  1,
                ]
              }
              multiple={true}
              onChange={[Function]}
              onClick={[Function]}
              onClickOutside={[Function]}
              onKeyDown={[Function]}
              open={false}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
            >
              <styled.div
                autoFocus={true}
                autoPosition={true}
                disableOnClickOutside={[Function]}
                enableOnClickOutside={[Function]}
                eventTypes={
                  Array [
                    "mousedown",
                    "touchstart",
                  ]
                }
                onKeyDown={[Function]}
                outsideClickIgnoreClass="ignore-react-onclickoutside"
                preventDefault={false}
                stopPropagation={false}
              >
                <StyledComponent
                  autoFocus={true}
                  autoPosition={true}
                  disableOnClickOutside={[Function]}
                  enableOnClickOutside={[Function]}
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-hSdWYo",
                        "isStatic": true,
                        "lastClassName": "c9",
                        "rules": Array [
                          "
  position: relative;
  outline: none;
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-hSdWYo",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={[Function]}
                  onKeyDown={[Function]}
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  stopPropagation={false}
                >
                  <div
                    autoFocus={true}
                    className="c9"
                    onKeyDown={[Function]}
                  >
                    <Component
                      border={1}
                      direction={0}
                      onClick={[Function]}
                      open={false}
                    />
                  </div>
                </StyledComponent>
              </styled.div>
            </InteractiveListInt>
          </InteractiveList>
        </Responsive>
      </div>
    </StyledComponent>
  </styled.div>
</DropdownFieldInt>
`;

exports[`<DropdownField /> should render a <DropdownField> that renders a placeholder 1`] = `
.c7 {
  display: inline-block;
}

.c7 > svg {
  float: left;
}

.c6 {
  padding: 0 1rem;
}

.c6 i {
  display: block;
}

.c6 + .c5 {
  padding-left: 0;
}

.c3 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c8 {
  position: relative;
  outline: none;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(239,239,239,1);
  cursor: auto;
  overflow-y: auto;
  border: 1px solid rgba(255,255,255,0);
}

.c2:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c4 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(62,62,62,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: auto;
}

<DropdownFieldInt
  data={
    Array [
      "1",
      "2",
    ]
  }
  multiple={true}
  placeholder="No value selected"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-jlyJG",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
  outline: 0;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-jlyJG",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <styled.div
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gipzik",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  display: flex;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gipzik",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onKeyDown={[Function]}
            onMouseDown={[Function]}
            tabIndex={0}
          >
            <div
              className="c1"
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              tabIndex={0}
            >
              <Styled(styled.div)
                border={1}
                focused={false}
                hasValue={false}
              >
                <StyledComponent
                  border={1}
                  focused={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-csuQGl",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          [Function],
                          "
  border: 1px solid ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "Styled(styled.div)",
                      "foldedComponentIds": Array [
                        "sc-jzJRlG",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-csuQGl",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hasValue={false}
                >
                  <div
                    className="c2"
                  >
                    <Component
                      error={false}
                      focused={false}
                      hasValue={false}
                      placeholder="No value selected"
                    >
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gqjmRU",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  flex-grow: 1;
  display: flex;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-gqjmRU",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c3"
                          >
                            <styled.div
                              labelShown={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-Rmtcm",
                                      "isStatic": false,
                                      "lastClassName": "c4",
                                      "rules": Array [
                                        "
  ",
                                        "
    ",
                                        "font-size: 1rem;
  ",
                                        "
    ",
                                        "line-height: 1.375rem;
  ",
                                        "
    ",
                                        "
  ",
                                        "
  padding: ",
                                        [Function],
                                        ";
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: ",
                                        [Function],
                                        ";
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-Rmtcm",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                labelShown={false}
                              >
                                <div
                                  className="c4"
                                >
                                  No value selected
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Component>
                    <Component
                      hasValue={false}
                    />
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "c5",
                              "isStatic": true,
                              "lastClassName": "c6",
                              "rules": Array [
                                "
  padding: 0 ",
                                "1rem",
                                ";

  i {
    display: block;
  }

  & + & {
    padding-left: 0;
  }
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "c5",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="c5 c6"
                        >
                          <Icon
                            color="rgba(75,78,82,1)"
                            name="KeyboardArrowDown"
                            size="22px"
                          >
                            <styled.i>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-htpNat",
                                      "isStatic": true,
                                      "lastClassName": "c7",
                                      "rules": Array [
                                        "
  display: inline-block;

  > svg {
    float: left;
  }
",
                                      ],
                                    },
                                    "displayName": "styled.i",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-htpNat",
                                    "target": "i",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <i
                                  className="c7"
                                >
                                  <KeyboardArrowDown
                                    height="22px"
                                    style={
                                      Object {
                                        "fill": "rgba(75,78,82,1)",
                                        "stroke": undefined,
                                      }
                                    }
                                    viewBox="0 0 24 24"
                                    width="22px"
                                  >
                                    <svg
                                      height="22px"
                                      style={
                                        Object {
                                          "fill": "rgba(75,78,82,1)",
                                          "stroke": undefined,
                                        }
                                      }
                                      viewBox="0 0 24 24"
                                      width="22px"
                                    >
                                      <path
                                        d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
                                      />
                                    </svg>
                                  </KeyboardArrowDown>
                                </i>
                              </StyledComponent>
                            </styled.i>
                          </Icon>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </div>
                </StyledComponent>
              </Styled(styled.div)>
            </div>
          </StyledComponent>
        </styled.div>
        <Responsive
          render={[Function]}
        >
          <InteractiveList
            autoFocus={true}
            autoPosition={true}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            excludeScrollbar={false}
            indices={Array []}
            multiple={true}
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={false}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <InteractiveListInt
              autoFocus={true}
              autoPosition={true}
              customWrapper={[Function]}
              data={
                Array [
                  "1",
                  "2",
                ]
              }
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              indices={Array []}
              multiple={true}
              onChange={[Function]}
              onClick={[Function]}
              onClickOutside={[Function]}
              onKeyDown={[Function]}
              open={false}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
            >
              <styled.div
                autoFocus={true}
                autoPosition={true}
                disableOnClickOutside={[Function]}
                enableOnClickOutside={[Function]}
                eventTypes={
                  Array [
                    "mousedown",
                    "touchstart",
                  ]
                }
                onKeyDown={[Function]}
                outsideClickIgnoreClass="ignore-react-onclickoutside"
                preventDefault={false}
                stopPropagation={false}
              >
                <StyledComponent
                  autoFocus={true}
                  autoPosition={true}
                  disableOnClickOutside={[Function]}
                  enableOnClickOutside={[Function]}
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-hSdWYo",
                        "isStatic": true,
                        "lastClassName": "c8",
                        "rules": Array [
                          "
  position: relative;
  outline: none;
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-hSdWYo",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={[Function]}
                  onKeyDown={[Function]}
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  stopPropagation={false}
                >
                  <div
                    autoFocus={true}
                    className="c8"
                    onKeyDown={[Function]}
                  >
                    <Component
                      border={1}
                      direction={0}
                      onClick={[Function]}
                      open={false}
                    />
                  </div>
                </StyledComponent>
              </styled.div>
            </InteractiveListInt>
          </InteractiveList>
        </Responsive>
      </div>
    </StyledComponent>
  </styled.div>
</DropdownFieldInt>
`;

exports[`<DropdownField /> should render a <DropdownField> with an error 1`] = `
.c9 {
  font-size: 0.75rem;
  line-height: 0.875rem;
  color: rgba(167,2,64,1);
  padding: 0.25rem 0;
}

.c7 {
  display: inline-block;
}

.c7 > svg {
  float: left;
}

.c6 {
  padding: 0 1rem;
}

.c6 i {
  display: block;
}

.c6 + .c5 {
  padding-left: 0;
}

.c3 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c8 {
  position: relative;
  outline: none;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(167,2,64,1);
  cursor: auto;
  overflow-y: auto;
  border: 1px solid rgba(255,255,255,0);
}

.c2:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c4 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(62,62,62,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: auto;
}

<DropdownFieldInt
  data={
    Array [
      "1",
      "2",
    ]
  }
  error="You need to select a field"
>
  <styled.div
    error="You need to select a field"
  >
    <StyledComponent
      error="You need to select a field"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-jlyJG",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
  outline: 0;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-jlyJG",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <styled.div
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gipzik",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  display: flex;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gipzik",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onKeyDown={[Function]}
            onMouseDown={[Function]}
            tabIndex={0}
          >
            <div
              className="c1"
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              tabIndex={0}
            >
              <Styled(styled.div)
                border={3}
                focused={false}
                hasValue={false}
              >
                <StyledComponent
                  border={3}
                  focused={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-csuQGl",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          [Function],
                          "
  border: 1px solid ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "Styled(styled.div)",
                      "foldedComponentIds": Array [
                        "sc-jzJRlG",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-csuQGl",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hasValue={false}
                >
                  <div
                    className="c2"
                  >
                    <Component
                      error={true}
                      focused={false}
                      hasValue={false}
                    >
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gqjmRU",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  flex-grow: 1;
  display: flex;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-gqjmRU",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c3"
                          >
                            <styled.div
                              labelShown={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-Rmtcm",
                                      "isStatic": false,
                                      "lastClassName": "c4",
                                      "rules": Array [
                                        "
  ",
                                        "
    ",
                                        "font-size: 1rem;
  ",
                                        "
    ",
                                        "line-height: 1.375rem;
  ",
                                        "
    ",
                                        "
  ",
                                        "
  padding: ",
                                        [Function],
                                        ";
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: ",
                                        [Function],
                                        ";
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-Rmtcm",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                labelShown={false}
                              >
                                <div
                                  className="c4"
                                />
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Component>
                    <Component
                      error="You need to select a field"
                      hasValue={false}
                    >
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "c5",
                                "isStatic": true,
                                "lastClassName": "c6",
                                "rules": Array [
                                  "
  padding: 0 ",
                                  "1rem",
                                  ";

  i {
    display: block;
  }

  & + & {
    padding-left: 0;
  }
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "c5",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5 c6"
                          >
                            <Icon
                              color="rgba(167,2,64,1)"
                              name="Error"
                              size="22px"
                            >
                              <styled.i>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-htpNat",
                                        "isStatic": true,
                                        "lastClassName": "c7",
                                        "rules": Array [
                                          "
  display: inline-block;

  > svg {
    float: left;
  }
",
                                        ],
                                      },
                                      "displayName": "styled.i",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-htpNat",
                                      "target": "i",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <i
                                    className="c7"
                                  >
                                    <Error
                                      height="22px"
                                      style={
                                        Object {
                                          "fill": "rgba(167,2,64,1)",
                                          "stroke": undefined,
                                        }
                                      }
                                      viewBox="0 0 24 24"
                                      width="22px"
                                    >
                                      <svg
                                        height="22px"
                                        style={
                                          Object {
                                            "fill": "rgba(167,2,64,1)",
                                            "stroke": undefined,
                                          }
                                        }
                                        viewBox="0 0 24 24"
                                        width="22px"
                                      >
                                        <path
                                          d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"
                                        />
                                      </svg>
                                    </Error>
                                  </i>
                                </StyledComponent>
                              </styled.i>
                            </Icon>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Component>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "c5",
                              "isStatic": true,
                              "lastClassName": "c6",
                              "rules": Array [
                                "
  padding: 0 ",
                                "1rem",
                                ";

  i {
    display: block;
  }

  & + & {
    padding-left: 0;
  }
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "c5",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="c5 c6"
                        >
                          <Icon
                            color="rgba(75,78,82,1)"
                            name="KeyboardArrowDown"
                            size="22px"
                          >
                            <styled.i>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-htpNat",
                                      "isStatic": true,
                                      "lastClassName": "c7",
                                      "rules": Array [
                                        "
  display: inline-block;

  > svg {
    float: left;
  }
",
                                      ],
                                    },
                                    "displayName": "styled.i",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-htpNat",
                                    "target": "i",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <i
                                  className="c7"
                                >
                                  <KeyboardArrowDown
                                    height="22px"
                                    style={
                                      Object {
                                        "fill": "rgba(75,78,82,1)",
                                        "stroke": undefined,
                                      }
                                    }
                                    viewBox="0 0 24 24"
                                    width="22px"
                                  >
                                    <svg
                                      height="22px"
                                      style={
                                        Object {
                                          "fill": "rgba(75,78,82,1)",
                                          "stroke": undefined,
                                        }
                                      }
                                      viewBox="0 0 24 24"
                                      width="22px"
                                    >
                                      <path
                                        d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
                                      />
                                    </svg>
                                  </KeyboardArrowDown>
                                </i>
                              </StyledComponent>
                            </styled.i>
                          </Icon>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </div>
                </StyledComponent>
              </Styled(styled.div)>
            </div>
          </StyledComponent>
        </styled.div>
        <Responsive
          render={[Function]}
        >
          <InteractiveList
            autoFocus={true}
            autoPosition={true}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            excludeScrollbar={false}
            indices={Array []}
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={false}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <InteractiveListInt
              autoFocus={true}
              autoPosition={true}
              customWrapper={[Function]}
              data={
                Array [
                  "1",
                  "2",
                ]
              }
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              indices={Array []}
              onChange={[Function]}
              onClick={[Function]}
              onClickOutside={[Function]}
              onKeyDown={[Function]}
              open={false}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
            >
              <styled.div
                autoFocus={true}
                autoPosition={true}
                disableOnClickOutside={[Function]}
                enableOnClickOutside={[Function]}
                eventTypes={
                  Array [
                    "mousedown",
                    "touchstart",
                  ]
                }
                onKeyDown={[Function]}
                outsideClickIgnoreClass="ignore-react-onclickoutside"
                preventDefault={false}
                stopPropagation={false}
              >
                <StyledComponent
                  autoFocus={true}
                  autoPosition={true}
                  disableOnClickOutside={[Function]}
                  enableOnClickOutside={[Function]}
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-hSdWYo",
                        "isStatic": true,
                        "lastClassName": "c8",
                        "rules": Array [
                          "
  position: relative;
  outline: none;
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-hSdWYo",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={[Function]}
                  onKeyDown={[Function]}
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  stopPropagation={false}
                >
                  <div
                    autoFocus={true}
                    className="c8"
                    onKeyDown={[Function]}
                  >
                    <Component
                      border={1}
                      direction={0}
                      onClick={[Function]}
                      open={false}
                    />
                  </div>
                </StyledComponent>
              </styled.div>
            </InteractiveListInt>
          </InteractiveList>
        </Responsive>
        <InputError>
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c9",
                    "rules": Array [
                      "
  ",
                      "
    ",
                      "font-size: 0.75rem;
  ",
                      "
    ",
                      "line-height: 0.875rem;
  ",
                      "
    ",
                      "
  ",
                      "
  color: ",
                      [Function],
                      ";

  padding: ",
                      "0.25rem",
                      " 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c9"
              >
                You need to select a field
              </div>
            </StyledComponent>
          </styled.div>
        </InputError>
      </div>
    </StyledComponent>
  </styled.div>
</DropdownFieldInt>
`;

exports[`<DropdownField /> should render a <DropdownField> with an error 2`] = `
.c9 {
  font-size: 0.75rem;
  line-height: 0.875rem;
  color: rgba(167,2,64,1);
  padding: 0.25rem 0;
}

.c7 {
  display: inline-block;
}

.c7 > svg {
  float: left;
}

.c6 {
  padding: 0 1rem;
}

.c6 i {
  display: block;
}

.c6 + .c5 {
  padding-left: 0;
}

.c3 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c8 {
  position: relative;
  outline: none;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(167,2,64,1);
  cursor: auto;
  overflow-y: auto;
  border: 1px solid rgba(255,255,255,0);
}

.c2:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c4 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(62,62,62,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: auto;
}

<DropdownFieldInt
  data={
    Array [
      "1",
      "2",
    ]
  }
  error="You need to select a field"
>
  <styled.div
    error="You need to select a field"
  >
    <StyledComponent
      error="You need to select a field"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-jlyJG",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
  outline: 0;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-jlyJG",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <styled.div
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gipzik",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  display: flex;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gipzik",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onKeyDown={[Function]}
            onMouseDown={[Function]}
            tabIndex={0}
          >
            <div
              className="c1"
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              tabIndex={0}
            >
              <Styled(styled.div)
                border={3}
                focused={false}
                hasValue={false}
              >
                <StyledComponent
                  border={3}
                  focused={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-csuQGl",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          [Function],
                          "
  border: 1px solid ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "Styled(styled.div)",
                      "foldedComponentIds": Array [
                        "sc-jzJRlG",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-csuQGl",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hasValue={false}
                >
                  <div
                    className="c2"
                  >
                    <Component
                      error={true}
                      focused={false}
                      hasValue={false}
                    >
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gqjmRU",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  flex-grow: 1;
  display: flex;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-gqjmRU",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c3"
                          >
                            <styled.div
                              labelShown={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-Rmtcm",
                                      "isStatic": false,
                                      "lastClassName": "c4",
                                      "rules": Array [
                                        "
  ",
                                        "
    ",
                                        "font-size: 1rem;
  ",
                                        "
    ",
                                        "line-height: 1.375rem;
  ",
                                        "
    ",
                                        "
  ",
                                        "
  padding: ",
                                        [Function],
                                        ";
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: ",
                                        [Function],
                                        ";
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-Rmtcm",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                labelShown={false}
                              >
                                <div
                                  className="c4"
                                />
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Component>
                    <Component
                      error="You need to select a field"
                      hasValue={false}
                    >
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "c5",
                                "isStatic": true,
                                "lastClassName": "c6",
                                "rules": Array [
                                  "
  padding: 0 ",
                                  "1rem",
                                  ";

  i {
    display: block;
  }

  & + & {
    padding-left: 0;
  }
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "c5",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c5 c6"
                          >
                            <Icon
                              color="rgba(167,2,64,1)"
                              name="Error"
                              size="22px"
                            >
                              <styled.i>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-htpNat",
                                        "isStatic": true,
                                        "lastClassName": "c7",
                                        "rules": Array [
                                          "
  display: inline-block;

  > svg {
    float: left;
  }
",
                                        ],
                                      },
                                      "displayName": "styled.i",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-htpNat",
                                      "target": "i",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <i
                                    className="c7"
                                  >
                                    <Error
                                      height="22px"
                                      style={
                                        Object {
                                          "fill": "rgba(167,2,64,1)",
                                          "stroke": undefined,
                                        }
                                      }
                                      viewBox="0 0 24 24"
                                      width="22px"
                                    >
                                      <svg
                                        height="22px"
                                        style={
                                          Object {
                                            "fill": "rgba(167,2,64,1)",
                                            "stroke": undefined,
                                          }
                                        }
                                        viewBox="0 0 24 24"
                                        width="22px"
                                      >
                                        <path
                                          d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"
                                        />
                                      </svg>
                                    </Error>
                                  </i>
                                </StyledComponent>
                              </styled.i>
                            </Icon>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Component>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "c5",
                              "isStatic": true,
                              "lastClassName": "c6",
                              "rules": Array [
                                "
  padding: 0 ",
                                "1rem",
                                ";

  i {
    display: block;
  }

  & + & {
    padding-left: 0;
  }
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "c5",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="c5 c6"
                        >
                          <Icon
                            color="rgba(75,78,82,1)"
                            name="KeyboardArrowDown"
                            size="22px"
                          >
                            <styled.i>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-htpNat",
                                      "isStatic": true,
                                      "lastClassName": "c7",
                                      "rules": Array [
                                        "
  display: inline-block;

  > svg {
    float: left;
  }
",
                                      ],
                                    },
                                    "displayName": "styled.i",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-htpNat",
                                    "target": "i",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <i
                                  className="c7"
                                >
                                  <KeyboardArrowDown
                                    height="22px"
                                    style={
                                      Object {
                                        "fill": "rgba(75,78,82,1)",
                                        "stroke": undefined,
                                      }
                                    }
                                    viewBox="0 0 24 24"
                                    width="22px"
                                  >
                                    <svg
                                      height="22px"
                                      style={
                                        Object {
                                          "fill": "rgba(75,78,82,1)",
                                          "stroke": undefined,
                                        }
                                      }
                                      viewBox="0 0 24 24"
                                      width="22px"
                                    >
                                      <path
                                        d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
                                      />
                                    </svg>
                                  </KeyboardArrowDown>
                                </i>
                              </StyledComponent>
                            </styled.i>
                          </Icon>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </div>
                </StyledComponent>
              </Styled(styled.div)>
            </div>
          </StyledComponent>
        </styled.div>
        <Responsive
          render={[Function]}
        >
          <InteractiveList
            autoFocus={true}
            autoPosition={true}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            excludeScrollbar={false}
            indices={Array []}
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={false}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <InteractiveListInt
              autoFocus={true}
              autoPosition={true}
              customWrapper={[Function]}
              data={
                Array [
                  "1",
                  "2",
                ]
              }
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              indices={Array []}
              onChange={[Function]}
              onClick={[Function]}
              onClickOutside={[Function]}
              onKeyDown={[Function]}
              open={false}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
            >
              <styled.div
                autoFocus={true}
                autoPosition={true}
                disableOnClickOutside={[Function]}
                enableOnClickOutside={[Function]}
                eventTypes={
                  Array [
                    "mousedown",
                    "touchstart",
                  ]
                }
                onKeyDown={[Function]}
                outsideClickIgnoreClass="ignore-react-onclickoutside"
                preventDefault={false}
                stopPropagation={false}
              >
                <StyledComponent
                  autoFocus={true}
                  autoPosition={true}
                  disableOnClickOutside={[Function]}
                  enableOnClickOutside={[Function]}
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-hSdWYo",
                        "isStatic": true,
                        "lastClassName": "c8",
                        "rules": Array [
                          "
  position: relative;
  outline: none;
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-hSdWYo",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={[Function]}
                  onKeyDown={[Function]}
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  stopPropagation={false}
                >
                  <div
                    autoFocus={true}
                    className="c8"
                    onKeyDown={[Function]}
                  >
                    <Component
                      border={1}
                      direction={0}
                      onClick={[Function]}
                      open={false}
                    />
                  </div>
                </StyledComponent>
              </styled.div>
            </InteractiveListInt>
          </InteractiveList>
        </Responsive>
        <InputError>
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c9",
                    "rules": Array [
                      "
  ",
                      "
    ",
                      "font-size: 0.75rem;
  ",
                      "
    ",
                      "line-height: 0.875rem;
  ",
                      "
    ",
                      "
  ",
                      "
  color: ",
                      [Function],
                      ";

  padding: ",
                      "0.25rem",
                      " 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c9"
              >
                You need to select a field
              </div>
            </StyledComponent>
          </styled.div>
        </InputError>
      </div>
    </StyledComponent>
  </styled.div>
</DropdownFieldInt>
`;

exports[`<DropdownField /> should render a borderless <DropdownField> 1`] = `
.c8 {
  display: inline-block;
}

.c8 > svg {
  float: left;
}

.c7 {
  padding: 0 1rem;
}

.c7 i {
  display: block;
}

.c7 + .c6 {
  padding-left: 0;
}

.c3 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c9 {
  position: relative;
  outline: none;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(75,78,82,1);
  cursor: auto;
  overflow-y: auto;
  border: 1px solid rgba(255,255,255,0);
}

.c2:hover {
  border-bottom-color: rgba(0,139,208,1);
}

.c4 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(62,62,62,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: auto;
}

.c5 {
  display: inline-block;
  line-height: normal;
  border: 0;
  color: rgba(0,0,0,1);
}

<DropdownFieldInt
  borderless={true}
  data={
    Array [
      "1",
      "2",
    ]
  }
  defaultValue="1"
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-jlyJG",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
  outline: 0;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-jlyJG",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <styled.div
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gipzik",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  display: flex;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gipzik",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onKeyDown={[Function]}
            onMouseDown={[Function]}
            tabIndex={0}
          >
            <div
              className="c1"
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              tabIndex={0}
            >
              <Styled(styled.div)
                border={0}
                focused={false}
                hasValue={true}
              >
                <StyledComponent
                  border={0}
                  focused={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-csuQGl",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          [Function],
                          "
  border: 1px solid ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "Styled(styled.div)",
                      "foldedComponentIds": Array [
                        "sc-jzJRlG",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-csuQGl",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hasValue={true}
                >
                  <div
                    className="c2"
                  >
                    <Component
                      error={false}
                      focused={false}
                      hasValue={true}
                    >
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gqjmRU",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  flex-grow: 1;
  display: flex;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-gqjmRU",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c3"
                          >
                            <styled.div
                              labelShown={false}
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-Rmtcm",
                                      "isStatic": false,
                                      "lastClassName": "c4",
                                      "rules": Array [
                                        "
  ",
                                        "
    ",
                                        "font-size: 1rem;
  ",
                                        "
    ",
                                        "line-height: 1.375rem;
  ",
                                        "
    ",
                                        "
  ",
                                        "
  padding: ",
                                        [Function],
                                        ";
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: ",
                                        [Function],
                                        ";
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-Rmtcm",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                labelShown={false}
                              >
                                <div
                                  className="c4"
                                >
                                  <styled.span
                                    key="1"
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-bRBYWo",
                                            "isStatic": false,
                                            "lastClassName": "c5",
                                            "rules": Array [
                                              "
  display: inline-block;
  line-height: normal;
  border: 0;
  color: ",
                                              [Function],
                                              ";
",
                                            ],
                                          },
                                          "displayName": "styled.span",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-bRBYWo",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <span
                                        className="c5"
                                      >
                                        1
                                      </span>
                                    </StyledComponent>
                                  </styled.span>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Component>
                    <Component
                      hasValue={true}
                    />
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "c6",
                              "isStatic": true,
                              "lastClassName": "c7",
                              "rules": Array [
                                "
  padding: 0 ",
                                "1rem",
                                ";

  i {
    display: block;
  }

  & + & {
    padding-left: 0;
  }
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "c6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="c6 c7"
                        >
                          <Icon
                            color="rgba(75,78,82,1)"
                            name="KeyboardArrowDown"
                            size="22px"
                          >
                            <styled.i>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-htpNat",
                                      "isStatic": true,
                                      "lastClassName": "c8",
                                      "rules": Array [
                                        "
  display: inline-block;

  > svg {
    float: left;
  }
",
                                      ],
                                    },
                                    "displayName": "styled.i",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-htpNat",
                                    "target": "i",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <i
                                  className="c8"
                                >
                                  <KeyboardArrowDown
                                    height="22px"
                                    style={
                                      Object {
                                        "fill": "rgba(75,78,82,1)",
                                        "stroke": undefined,
                                      }
                                    }
                                    viewBox="0 0 24 24"
                                    width="22px"
                                  >
                                    <svg
                                      height="22px"
                                      style={
                                        Object {
                                          "fill": "rgba(75,78,82,1)",
                                          "stroke": undefined,
                                        }
                                      }
                                      viewBox="0 0 24 24"
                                      width="22px"
                                    >
                                      <path
                                        d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
                                      />
                                    </svg>
                                  </KeyboardArrowDown>
                                </i>
                              </StyledComponent>
                            </styled.i>
                          </Icon>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </div>
                </StyledComponent>
              </Styled(styled.div)>
            </div>
          </StyledComponent>
        </styled.div>
        <Responsive
          render={[Function]}
        >
          <InteractiveList
            autoFocus={true}
            autoPosition={true}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            excludeScrollbar={false}
            indices={
              Array [
                0,
              ]
            }
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={false}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <InteractiveListInt
              autoFocus={true}
              autoPosition={true}
              customWrapper={[Function]}
              data={
                Array [
                  "1",
                  "2",
                ]
              }
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              indices={
                Array [
                  0,
                ]
              }
              onChange={[Function]}
              onClick={[Function]}
              onClickOutside={[Function]}
              onKeyDown={[Function]}
              open={false}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
            >
              <styled.div
                autoFocus={true}
                autoPosition={true}
                disableOnClickOutside={[Function]}
                enableOnClickOutside={[Function]}
                eventTypes={
                  Array [
                    "mousedown",
                    "touchstart",
                  ]
                }
                onKeyDown={[Function]}
                outsideClickIgnoreClass="ignore-react-onclickoutside"
                preventDefault={false}
                stopPropagation={false}
              >
                <StyledComponent
                  autoFocus={true}
                  autoPosition={true}
                  disableOnClickOutside={[Function]}
                  enableOnClickOutside={[Function]}
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-hSdWYo",
                        "isStatic": true,
                        "lastClassName": "c9",
                        "rules": Array [
                          "
  position: relative;
  outline: none;
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-hSdWYo",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={[Function]}
                  onKeyDown={[Function]}
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  stopPropagation={false}
                >
                  <div
                    autoFocus={true}
                    className="c9"
                    onKeyDown={[Function]}
                  >
                    <Component
                      border={1}
                      direction={0}
                      onClick={[Function]}
                      open={false}
                    />
                  </div>
                </StyledComponent>
              </styled.div>
            </InteractiveListInt>
          </InteractiveList>
        </Responsive>
      </div>
    </StyledComponent>
  </styled.div>
</DropdownFieldInt>
`;

exports[`<DropdownField /> should render a disabled <DropdownField> 1`] = `
.c8 {
  display: inline-block;
}

.c8 > svg {
  float: left;
}

.c7 {
  padding: 0 1rem;
}

.c7 i {
  display: block;
}

.c7 + .c6 {
  padding-left: 0;
}

.c3 {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column-reverse;
  -ms-flex-flow: column-reverse;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
}

.c9 {
  position: relative;
  outline: none;
}

.c0 {
  position: relative;
  outline: 0;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c2 {
  box-sizing: border-box;
  box-shadow: none;
  margin: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  background: rgba(248,248,248,1);
  min-height: 54px;
  max-height: 112px;
  border-bottom: 1px solid rgba(75,78,82,1);
  cursor: not-allowed;
  overflow-y: auto;
  border: 1px solid rgba(255,255,255,0);
}

.c2:hover {
  border-bottom-color: rgba(239,239,239,1);
}

.c4 {
  font-size: 1rem;
  line-height: 1.375rem;
  padding: 1rem;
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: rgba(180,180,180,1);
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: not-allowed;
}

.c5 {
  display: inline-block;
  line-height: normal;
  border: 0;
  color: rgba(0,0,0,1);
}

<DropdownFieldInt
  data={
    Array [
      "1",
      "2",
    ]
  }
  defaultValue="1"
  disabled={true}
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-jlyJG",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
  outline: 0;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-jlyJG",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <styled.div
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          tabIndex={0}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gipzik",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  display: flex;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gipzik",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onKeyDown={[Function]}
            onMouseDown={[Function]}
            tabIndex={0}
          >
            <div
              className="c1"
              onKeyDown={[Function]}
              onMouseDown={[Function]}
              tabIndex={0}
            >
              <Styled(styled.div)
                border={1}
                disabled={true}
                focused={false}
                hasValue={true}
              >
                <StyledComponent
                  border={1}
                  disabled={true}
                  focused={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-csuQGl",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          [Function],
                          "
  border: 1px solid ",
                          [Function],
                          ";
",
                        ],
                      },
                      "displayName": "Styled(styled.div)",
                      "foldedComponentIds": Array [
                        "sc-jzJRlG",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-csuQGl",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  hasValue={true}
                >
                  <div
                    className="c2"
                    disabled={true}
                  >
                    <Component
                      error={false}
                      focused={false}
                      hasValue={true}
                    >
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gqjmRU",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  flex-grow: 1;
  display: flex;
  flex-flow: column-reverse;
  height: 100%;
  position: relative;
  min-width: 0;
  margin: auto;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-gqjmRU",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="c3"
                          >
                            <styled.div
                              disabled={true}
                              labelShown={false}
                            >
                              <StyledComponent
                                disabled={true}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-Rmtcm",
                                      "isStatic": false,
                                      "lastClassName": "c4",
                                      "rules": Array [
                                        "
  ",
                                        "
    ",
                                        "font-size: 1rem;
  ",
                                        "
    ",
                                        "line-height: 1.375rem;
  ",
                                        "
    ",
                                        "
  ",
                                        "
  padding: ",
                                        [Function],
                                        ";
  margin: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: ",
                                        [Function],
                                        ";
  font-family: inherit;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  cursor: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-Rmtcm",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                labelShown={false}
                              >
                                <div
                                  className="c4"
                                  disabled={true}
                                >
                                  <styled.span
                                    key="1"
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-bRBYWo",
                                            "isStatic": false,
                                            "lastClassName": "c5",
                                            "rules": Array [
                                              "
  display: inline-block;
  line-height: normal;
  border: 0;
  color: ",
                                              [Function],
                                              ";
",
                                            ],
                                          },
                                          "displayName": "styled.span",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-bRBYWo",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <span
                                        className="c5"
                                      >
                                        1
                                      </span>
                                    </StyledComponent>
                                  </styled.span>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Component>
                    <Component
                      disabled={true}
                      hasValue={true}
                    />
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "c6",
                              "isStatic": true,
                              "lastClassName": "c7",
                              "rules": Array [
                                "
  padding: 0 ",
                                "1rem",
                                ";

  i {
    display: block;
  }

  & + & {
    padding-left: 0;
  }
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "c6",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="c6 c7"
                        >
                          <Icon
                            color="rgba(211,211,211,1)"
                            name="KeyboardArrowDown"
                            size="22px"
                          >
                            <styled.i>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-htpNat",
                                      "isStatic": true,
                                      "lastClassName": "c8",
                                      "rules": Array [
                                        "
  display: inline-block;

  > svg {
    float: left;
  }
",
                                      ],
                                    },
                                    "displayName": "styled.i",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-htpNat",
                                    "target": "i",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <i
                                  className="c8"
                                >
                                  <KeyboardArrowDown
                                    height="22px"
                                    style={
                                      Object {
                                        "fill": "rgba(211,211,211,1)",
                                        "stroke": undefined,
                                      }
                                    }
                                    viewBox="0 0 24 24"
                                    width="22px"
                                  >
                                    <svg
                                      height="22px"
                                      style={
                                        Object {
                                          "fill": "rgba(211,211,211,1)",
                                          "stroke": undefined,
                                        }
                                      }
                                      viewBox="0 0 24 24"
                                      width="22px"
                                    >
                                      <path
                                        d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"
                                      />
                                    </svg>
                                  </KeyboardArrowDown>
                                </i>
                              </StyledComponent>
                            </styled.i>
                          </Icon>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </div>
                </StyledComponent>
              </Styled(styled.div)>
            </div>
          </StyledComponent>
        </styled.div>
        <Responsive
          render={[Function]}
        >
          <InteractiveList
            autoFocus={true}
            autoPosition={true}
            customWrapper={[Function]}
            data={
              Array [
                "1",
                "2",
              ]
            }
            eventTypes={
              Array [
                "mousedown",
                "touchstart",
              ]
            }
            excludeScrollbar={false}
            indices={
              Array [
                0,
              ]
            }
            onChange={[Function]}
            onClick={[Function]}
            onClickOutside={[Function]}
            onKeyDown={[Function]}
            open={false}
            outsideClickIgnoreClass="ignore-react-onclickoutside"
            preventDefault={false}
            stopPropagation={false}
          >
            <InteractiveListInt
              autoFocus={true}
              autoPosition={true}
              customWrapper={[Function]}
              data={
                Array [
                  "1",
                  "2",
                ]
              }
              disableOnClickOutside={[Function]}
              enableOnClickOutside={[Function]}
              eventTypes={
                Array [
                  "mousedown",
                  "touchstart",
                ]
              }
              indices={
                Array [
                  0,
                ]
              }
              onChange={[Function]}
              onClick={[Function]}
              onClickOutside={[Function]}
              onKeyDown={[Function]}
              open={false}
              outsideClickIgnoreClass="ignore-react-onclickoutside"
              preventDefault={false}
              stopPropagation={false}
            >
              <styled.div
                autoFocus={true}
                autoPosition={true}
                disableOnClickOutside={[Function]}
                enableOnClickOutside={[Function]}
                eventTypes={
                  Array [
                    "mousedown",
                    "touchstart",
                  ]
                }
                onKeyDown={[Function]}
                outsideClickIgnoreClass="ignore-react-onclickoutside"
                preventDefault={false}
                stopPropagation={false}
              >
                <StyledComponent
                  autoFocus={true}
                  autoPosition={true}
                  disableOnClickOutside={[Function]}
                  enableOnClickOutside={[Function]}
                  eventTypes={
                    Array [
                      "mousedown",
                      "touchstart",
                    ]
                  }
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-hSdWYo",
                        "isStatic": true,
                        "lastClassName": "c9",
                        "rules": Array [
                          "
  position: relative;
  outline: none;
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-hSdWYo",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={[Function]}
                  onKeyDown={[Function]}
                  outsideClickIgnoreClass="ignore-react-onclickoutside"
                  preventDefault={false}
                  stopPropagation={false}
                >
                  <div
                    autoFocus={true}
                    className="c9"
                    onKeyDown={[Function]}
                  >
                    <Component
                      border={1}
                      direction={0}
                      onClick={[Function]}
                      open={false}
                    />
                  </div>
                </StyledComponent>
              </styled.div>
            </InteractiveListInt>
          </InteractiveList>
        </Responsive>
      </div>
    </StyledComponent>
  </styled.div>
</DropdownFieldInt>
`;
